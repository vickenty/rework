use syntax::*;

#![arguments(struct_literal: bool)]

pub module -> Elem<'input> =
    a:block_meta b:list<item> c:Ws
    { node!("module", a, b, c) }

pub item -> Elem<'input> =
    a:item_meta b:opt<K<"pub">> c:item_inner
    { node!("item", a, b, c) }

item_meta -> Elem<'input> =
    a:list<meta<empty>>
    { node!("item_meta", a) }

item_inner -> Elem<'input> =
    item_use /
    item_struct /
    item_enum /
    item_type /
    item_fn /
    item_macro_rules /
    item_impl /
    item_const /
    item_static /
    item_macro /
    item_mod /
    item_trait /
    item_extern

item_use -> Elem<'input> =
    a:K<"use"> b:S<[^;]+> c:S<";">
    { node!("item_use", a, b, c) }

item_struct -> Elem<'input> =
    a:K<"struct"> b:ident c:opt<type_parameters> d:opt<where_block> e:struct_body
    { node!("item_struct", a, b, c, d, e) }

struct_body -> Elem<'input> =
    a:tuple_struct_body b:S<";">
    { node!("struct_body", a, b) }
    /
    a:S<";">
    { node!("struct_body", a) }
    /
    a:named_struct_body
    { node!("struct_body", a) }

tuple_struct_body -> Elem<'input> =
    a:S<"("> b:opt<K<"pub">> c:csep<type_name> d:S<")">
    { node!("tuple_struct_body", a, b, c, d) }

named_struct_body -> Elem<'input> =
    a:S<"{"> b:opt<csep<struct_field>> c:S<"}">
    { node!("named_struct_body", a, b, c) }

struct_field -> Elem<'input> =
    a:item_meta b:opt<K<"pub">> c:ident d:S<":"> e:type_name
    { node!("struct_field", a, b, c, d, e) }

item_enum -> Elem<'input> =
    a:K<"enum"> b:ident c:opt<type_parameters> d:opt<where_block> e:enum_body
    { node!("item_enum", a, b, c, d, e) }

enum_body -> Elem<'input> =
    a:S<"{"> b:csep<enum_variant> c:S<"}">
    { node!("enum_body", a, b, c) }

enum_variant -> Elem<'input> =
    a:ident b:opt<enum_variant_body>
    { node!("variant", a, b) }

enum_variant_body -> Elem<'input> =
    tuple_struct_body /
    named_struct_body /
    enum_variant_value

enum_variant_value -> Elem<'input> =
    a:S<"="> b:literal
    { node!("enum_variant_value", a, b) }

meta<insert> =
     a:S<"#"> b:insert c:S<"["> d:attribute e:S<"]">
     { node!("meta", a, b, c, d, e) }

attribute -> Elem<'input> =
    a:ident b:(attribute_arguments / attribute_value / empty)
    { node!("attribute", a, b) }

attribute_arguments -> Elem<'input> =
    a:S<"("> b:csep<attribute> c:S<")">
    { node!("attribute_arguments", a, b, c) }

attribute_value -> Elem<'input> =
    a:S<"="> b:literal
    { node!("attribute_value", a, b) }

item_type -> Elem<'input> =
    type_item<type_value>

type_item<value> =
    a:K<"type"> b:ident c:opt<type_parameters> d:opt<where_block> e:value f:S<";">
    { node!("item_type", a, b, c, d, e, f) }

type_value -> Elem<'input> =
    a:S<"="> b:type_name
    { node!("item_type_def", a, b) }

item_macro_rules -> Elem<'input> =
    a:K<"macro_rules"> b:S<"!"> c:ident d:macro_rules_body
    { node!("item_macro_rules", a, b, c, d) }

macro_rules_body -> Elem<'input> =
    a:item_macro_tail<sep_list1<macro_rules_case, S<";">>>
    { node_vec("macro_rules_body", a) }

macro_rules_case -> Elem<'input> =
    a:macro_group<macro_match> b:S<"=>"> c:macro_group<macro_expr>
    { node!("macro_rules_case", a, b, c) }

macro_match -> Elem<'input> =
    a:macro_match_inner*
    { node_vec("macro_match", a) }

macro_match_inner -> Elem<'input> =
    macro_group<macro_match> /
    macro_repeat<macro_match> /
    macro_match_var /
    macro_token< () >

macro_group<inner> =
    a:S<"("> b:inner c:S<")">
    { node!("macro_group", a, b, c) }
    /
    a:S<"{"> b:inner c:S<"}">
    { node!("macro_group", a, b, c) }
    /
    a:S<"["> b:inner c:S<"]">
    { node!("macro_group", a, b, c) }

macro_repeat<inner> =
    a:S<"$("> b:inner c:S<")"> c:opt<macro_token<![+*]>> d:S<[*+]>
    { node!("macro_repeat", a, b, c, d) }

macro_match_var -> Elem<'input> =
    a:T<"$"> b:ident c:S<":"> d:ident
    { node!("macro_match_var", a, b, c, d) }

macro_token<guard> =
    guard a:T<ident / Ops / [^)}\]]>
    { a }

Ops = Assign / Range / "<-" / "->" / "=>" / ">>" / "<<"

macro_expr -> Elem<'input> =
    a:macro_expr_inner*
    { node_vec("macro_expr", a) }

macro_expr_inner -> Elem<'input> =
    macro_group<macro_expr> /
    macro_repeat<macro_expr> /
    macro_expr_var /
    macro_token< () >

macro_arg -> Elem<'input> =
    a:macro_arg_inner*
    { node_vec("macro_arg", a) }

macro_arg_inner -> Elem<'input> =
    macro_group<macro_arg> /
    literal /
    macro_token< () >

macro_expr_var -> Elem<'input> =
    a:T<"$" ident>
    { node!("macro_expr_var", a) }

item_fn -> Elem<'input> =
    fn_item<block>

fn_item<body> =
    a:opt<K<"unsafe">> b:opt<fn_abi> c:K<"fn"> d:fn_signature e:body
    { node!("item_fn", a, b, c, d, e) }

fn_abi -> Elem<'input> =
    a:K<"extern"> b:opt<string>
    { node!("fn_abi", a, b) }

fn_signature -> Elem<'input> =
    a:ident b:opt<type_parameters> c:fn_parameters<self_param / pattern> d:opt<fn_return_type> e:opt<where_block>
    { node!("fn_signature", a, b, c, d, e) }

fn_parameters<param> =
    a:S<"("> b:csep<param> c:S<")">
    { node!("fn_parameters", a, b, c) }

self_param -> Elem<'input> =
    a:S<"&"> b:opt<lifetime> c:opt<K<"mut">> d:K<"self">
    { node!("self_param", a, b, c, d) }
    /
    a:K<"self">
    { node!("self_param", a) }

fn_return_type -> Elem<'input> =
    a:S<"->"> b:type_name
    { node!("fn_return_type", a, b) }

item_impl -> Elem<'input> =
    a:impl_flags b:K<"impl"> c:opt<type_parameters> d:impl_type e:impl_block
    { node!("item_impl", a, b, c, d, e) }

impl_flags -> Elem<'input> =
    a:opt<K<"default">> b:opt<K<"unsafe">>
    { node!("impl_flags", a, b) }

impl_type -> Elem<'input> =
    a:type_path b:opt<impl_for> c:opt<where_block>
    { node!("impl_type", a, b, c) }

impl_for -> Elem<'input> =
    a:K<"for"> b:type_name
    { node!("impl_for", a, b) }

impl_block -> Elem<'input> =
    a:S<"{"> b:list<impl_item> c:S<"}">
    { node!("impl_block", a, b, c) }

impl_item -> Elem<'input> =
    a:item_meta b:impl_item_flags c:impl_item_inner
    { node!("impl_item", a, b, c) }

impl_item_flags -> Elem<'input> =
    a:opt<K<"pub">> b:opt<K<"default">>
    { node!("impl_item_flags", a, b) }

impl_item_inner -> Elem<'input> =
    item_const /
    item_type /
    item_fn

item_const -> Elem<'input> =
    const_item<const_value>

const_item<value> =
    a:K<"const"> b:ident c:type_bound d:value e:S<";">
    { node!("item_const", a, b, c, d, e) }

const_value -> Elem<'input> =
    a:S<"="> b:expr<(true)>
    { node!("const_value", a, b) }

item_static -> Elem<'input> =
    static_item<const_value>

static_item<value> =
    a:K<"static"> b:ident c:type_bound d:value e:S<";">
    { node!("item_static", a, b, c, d, e) }

// Unlike rustc, accepts type arguments at module level
item_macro -> Elem<'input> =
    a:path<S<"::">> b:S<"!"> c:item_macro_tail<macro_arg>
    { node_vec("item_macro", prepend(a, prepend(b, c))) }

item_macro_tail<inner> =
    a:S<"{"> b:inner c:S<"}">
    { vec!(a, b, c, node!("empty")) }
    /
    a:S<"["> b:inner c:S<"]"> d:S<";">
    { vec!(a, b, c, d) }
    /
    a:S<"("> b:inner c:S<")"> d:S<";">
    { vec!(a, b, c, d) }

item_mod -> Elem<'input> =
    a:K<"mod"> b:ident c:mod_body
    { node!("mod", a, b, c) }

mod_body -> Elem<'input> =
    S<";"> /
    mod_inline

mod_inline -> Elem<'input> =
    a:S<"{"> b:module c:S<"}">
    { node!("mod_inline", a, b, c) }

item_trait -> Elem<'input> =
    a:K<"trait"> b:ident c:opt<type_parameters> d:opt<type_bound> e:opt<where_block> f:trait_body
    { node!("item_trait", a, b, c, d, e, f) }

trait_body -> Elem<'input> =
    a:S<"{"> b:list<trait_item> c:S<"}">
    { node!("trait_body", a, b, c) }

trait_item -> Elem<'input> =
    const_item<opt<const_value>> /
    trait_item_type /
    trait_item_fn

trait_item_type -> Elem<'input> =
    a:K<"type"> b:ident c:opt<type_bound> d:opt<type_value> e:S<";">
    { node!("trait_type", a, b, c, d, e) }

trait_item_fn -> Elem<'input> =
    a:opt<K<"unsafe">> b:opt<fn_abi> c:K<"fn"> d:ident e:type_fn_signature f:(block / S<";">)
    { node!("trait_fn", a, b, c, d, e, f) }

item_extern -> Elem<'input> =
    a:K<"extern"> b:extern_inner
    { node!("item_extern", a, b) }

extern_inner -> Elem<'input> =
    extern_crate /
    extern_block

extern_crate -> Elem<'input> =
    a:K<"crate"> b:ident c:S<";">
    { node!("extern_crate", a, b, c) }

extern_block -> Elem<'input> =
    a:literal b:S<"{"> c:list<extern_decl> d:S<"}">
    { node!("extern_block", a, b, c, d) }

extern_decl -> Elem<'input> =
    a:opt<K<"pub">> b:extern_decl_inner
    { node!("extern_decl", a, b) }

extern_decl_inner -> Elem<'input> =
    type_item<empty> /
    fn_item<S<";">> /
    static_item<empty>

pub pattern -> Elem<'input> =
    a:pattern0 b:opt<type_bound>
    { node!("pattern", a, b) }

pattern0 -> Elem<'input> =
    pattern_literal /
    pattern_bind /
    pattern_tuple /
    pattern_path /
    pattern_ref /
    pattern_qual

follow<head, tail> =
    head:head tail:tail?
    {
        if let Some((kind, elems)) = tail {
            node_vec(kind, prepend(head, elems))
        } else {
            head
        }
    }

pattern_literal -> Elem<'input> =
    follow<literal, pattern_range>

pattern_range -> (&'static str, Vec<Elem<'input>>) =
    a:S<Range> b:(literal / path<S<"::">>)
    { ("pattern_range", vec![a, b]) }

literal -> Elem<'input> =
    float /
    integer /
    char /
    string

pattern_ref -> Elem<'input> =
    a:S<"&"> b:pattern
    { node!("pattern_ref", a, b) }

binding<tail1, tail2> =
    a:K<"ref"> b:opt<K<"mut">> c:ident d:tail1
    { node!("binding", a, b, c, d) }
    /
    a:K<"mut"> b:ident c:tail1
    { node!("binding", node!("empty"), a, b, c) }
    /
    a:ident b:tail2
    { node!("binding", node!("empty"), node!("empty"), a, b) }

pattern_bind -> Elem<'input> =
    a:binding<opt<pattern_at>, pattern_at>
    { node!("pattern_bind", a) }

pattern_at -> Elem<'input> =
    a:S<"@"> b:pattern
    { node!("pattern_at", a, b) }

pattern_tuple -> Elem<'input> =
    a:S<"("> b:opt<csep_tuple<pattern / S<"..">> / S<"..">> c:S<")">
    { node!("pattern_tuple", a, b, c) }

pattern_path -> Elem<'input> =
    follow<path<S<"::">>, pattern_path_tail>

pattern_path_tail -> (&'static str, Vec<Elem<'input>>) =
    a:(pattern_struct_tuple / pattern_struct_named)
    { ("pattern_struct", vec![ a ]) }
    /
    pattern_range

pattern_struct_tuple -> Elem<'input> =
    a:S<"("> b:csep<pattern / S<"..">> c:S<")">
    { node!("pattern_struct_tuple", a, b, c) }

pattern_struct_named -> Elem<'input> =
    a:S<"{"> b:csep<pattern_struct_field> c:S<"}">
    { node!("pattern_struct_named", a, b, c) }

// Unlike rustc, accepts splat in any position and allows trailing comma after '..'
pattern_struct_field -> Elem<'input> =
    binding<empty, opt<pattern_struct_field_pat>>
    /
    S<"..">

pattern_struct_field_pat -> Elem<'input> =
    a:S<":"> b:pattern
    { node!("pattern_struct_field_pat", a, b) }

pattern_qual -> Elem<'input> =
    a:expr_qual
    { node!("pattern_qual", a) }

block -> Elem<'input> =
    a:S<"{"> b:block_meta c:list<stmt> d:opt<expr> e:S<"}">
    { node!("block", a, b, c, d, e) }

block_meta -> Elem<'input> =
    a:list<meta<S<"!">>>
    { node!("block_meta", a) }

stmt -> Elem<'input> =
    item /
    stmt_let /
    stmt_expr

stmt_let -> Elem<'input> =
    a:S<"let"> b:pattern c:opt<let_value> d:S<";">
    { node!("stmt_let", a, b, c, d) }

let_value -> Elem<'input> =
    a:S<"="> b:expr
    { node!("let_value", a, b) }

stmt_expr -> Elem<'input> =
    a:expr_block_like b:opt<S<";">>
    { node!("stmt_expr", a, b) }
    /
    !expr_block_start a:expr<(true)> b:S<";">
    { node!("stmt_expr", a, b) }

pub type_name -> Elem<'input> =
    a:sep_list1<lifetime / type_prim, S<"+">>
    { node!("type_name", a) }

type_expr -> Elem<'input> =
    a:type_prim b:S<"+"> c:(lifetime / type_name)
    { node!("type_expr", a, b, c) }

type_prim -> Elem<'input> =
    type_impl /
    type_fn /
    type_fn_trait /
    type_path /
    type_slice /
    type_array /
    type_tuple /
    type_ref /
    type_ptr /
    type_as /
    type_never /
    type_group /
    type_optout

type_path -> Elem<'input> =
    a:opt<type_late_lifetime> b:path<empty>
    { node!("type_path", a, b) }

type_arguments<prefix> =
    a:prefix b:S<"<"> c:csep<type_assoc / type_name / lifetime> d:S<">">
    { node!("type_arguments", a, b, c, d) }

type_assoc -> Elem<'input> =
    a:ident b:S<"="> c:type_name
    { node!("type_assoc", a, b, c) }

type_slice -> Elem<'input> =
    a:S<"["> b:type_name c:S<"]">
    { node!("type_slice", a, b, c) }

type_array -> Elem<'input> =
    a:S<"["> b:type_name c:S<";"> d:expr e:S<"]">
    { node!("type_array", a, b, c, d, e) }

type_tuple -> Elem<'input> =
    a:S<"("> b:S<")">
    { node!("type_tuple", a, node!("empty"), b) }
    /
    a:S<"("> b:csep_tuple<type_name> c:S<")">
    { node!("type_tuple", a, b, c) }

type_ref -> Elem<'input> =
    a:S<"&"> b:opt<lifetime> c:opt<K<"mut">> d:type_name
    { node!("type_ref", a, b, c, d) }

type_ptr -> Elem<'input> =
    a:S<"*"> b:(K<"mut"> / K<"const">) c:type_name
    { node!("type_ptr", a, b, c) }

type_as -> Elem<'input> =
    a:type_as_body b:path_elem<S<"::">, empty>+
    { node_vec("type_as", prepend(a, b)) }

type_as_body -> Elem<'input> =
    a:S<"<"> b:type_name c:opt<type_as_trait> d:S<">">
    { node!("type_as_body", a, b, c, d) }

type_as_trait -> Elem<'input> =
    a:K<"as"> b:type_path
    { node!("type_as_trait", a, b) }

type_impl -> Elem<'input> =
    a:K<"impl"> b:type_name
    { node!("type_impl", a, b) }

type_fn -> Elem<'input> =
    a:opt<type_late_lifetime> b:opt<K<"unsafe">> c:opt<fn_abi> d:K<"fn"> e:type_fn_signature
    { node!("type_fn", a, b, c, d, e) }

type_late_lifetime -> Elem<'input> =
    a:K<"for"> b:S<"<"> c:csep<lifetime> d:S<">">
    { node!("type_late_lifetime", a, b, c, d) }

type_fn_signature -> Elem<'input> =
    a:fn_parameters<type_fn_param> b:opt<fn_return_type>
    { node!("type_fn_signature", a, b) }

type_fn_param -> Elem<'input> =
    a:opt<type_fn_param_name> b:type_name
    { node!("type_fn_param", a, b) }

type_fn_param_name -> Elem<'input> =
    a:ident b:S<":">
    { node!("type_fn_param_name", a, b) }

type_never -> Elem<'input> =
    S<"!">

type_group -> Elem<'input> =
    a:S<"("> b:type_name c:S<")">
    { node!("type_group", a, b, c) }

type_optout -> Elem<'input> =
    a:S<"?"> b:type_path
    { node!("type_optout", a, b) }

type_fn_trait -> Elem<'input> =
    a:opt<type_late_lifetime> b:FnTrait c:type_fn_signature
    { node!("type_fn_trait", a, b, c) }

FnTrait -> Elem<'input> = K<"FnOnce"> / K<"FnMut"> / K<"FnBox"> / K<"Fn">

type_parameters -> Elem<'input> =
    a:S<"<"> b:csep<type_parameter> c:S<">">
    { node!("type_parameters", a, b, c) }

type_parameter -> Elem<'input> =
    a:(lifetime / ident) b:opt<type_bound>
    { node!("type_parameter", a, b) }

type_bound -> Elem<'input> =
    a:S<":"> b:type_name
    { node!("type_bound", a, b) }

where_block -> Elem<'input> =
    a:K<"where"> b:csep<where_clause>
    { node!("where_block", a, b) }

where_clause -> Elem<'input> =
    a:type_name b:S<":"> c:type_name
    { node!("where_clause", a, b, c) }

#[cache]
pub expr -> Elem<'input> =
    a:expr_assign
    { node!("expr", a) }

expr_inner -> Elem<'input> =
    expr_assign<( true )>

expr_assign -> Elem<'input> = #infix<expr_assign_operand> {
    #R  a b:S<Assign> c { node!("binop", a, b, c) }
    #R  a b:S<"<-"> c { node!("binop", a, b, c) }
}

Assign = ("*" / "/" / "%" / "+" / "-" / "<<" / ">>" / "&" / "|" / "^")? "="

expr_assign_operand -> Elem<'input> =
    a:expr_range
    { node!("binop", node!("empty"), a.0, a.1) }
    /
    lhs:expr_binop range:expr_range?
    {
        if let Some((op, rhs)) = range {
            node!("binop", lhs, op, rhs)
        } else {
            lhs
        }
    }

expr_range -> (Elem<'input>, Elem<'input>) =
    a:S<Range> b:opt<expr_binop>
    { (a, b) }

Range = "..." / "..=" / ".."

expr_binop -> Elem<'input> = #infix<expr_cast> {
    #L  a b:S<"||"> c { node!("binop", a, b, c) }
    #L  a b:S<"&&"> c { node!("binop", a, b, c) }
    #L  a b:S<Compare> c { node!("binop", a, b, c) }
    #L  a b:S<"|"> c { node!("binop", a, b, c) }
    #L  a b:S<"^"> c { node!("binop", a, b, c) }
    #L  a b:S<"&"> c { node!("binop", a, b, c) }
    #L  a b:S<"<<"> c { node!("binop", a, b, c) }
        a b:S<">>"> c { node!("binop", a, b, c) }
    #L  a b:S<[+-]> c { node!("binop", a, b, c) }
    #L  a b:S<[*/%]> c { node!("binop", a, b, c) }
}

Compare = "<" !"-" "="? / ">" "="? / [!=] "="

expr_cast -> Elem<'input> =
    expr_cast0 /
    expr_prefix

// Helper to avoid left-recursion for suffix operators
suffix_expr<head, tail> =
    head:head tail:tail*
    { tail.into_iter().fold(head, |a, (kind, es)| node_vec(kind, prepend(a, es))) }

expr_cast0 -> Elem<'input> =
    suffix_expr<expr_prefix, expr_cast_tail>

expr_cast_tail -> (&'static str, Vec<Elem<'input>>) =
    a:K<"as"> b:type_prim
    { ("expr_as", vec![a, b]) }

expr_prefix -> Elem<'input> =
    a:(S<[!*-]> / refop) b:expr_prefix
    { node!("expr_prefix", a, b) }
    /
    expr_suffix

refop -> Elem<'input> =
    a:S<"&"> b:opt<K<"mut">>
    { node!("refop", a, b) }

expr_suffix -> Elem<'input> =
    suffix_expr<expr_prim, expr_suffix_tail>

expr_suffix_tail -> (&'static str, Vec<Elem<'input>>) =
    expr_index /
    expr_call /
    expr_field /
    expr_try

expr_index -> (&'static str, Vec<Elem<'input>>) =
    a:S<"["> b:expr_inner c:S<"]">
    { ("expr_index", vec![a, b, c]) }

expr_call -> (&'static str, Vec<Elem<'input>>) =
    a:S<"("> b:S<")">
    { ("expr_call", vec![a, node!("empty"), b]) }
    /
    a:S<"("> b:csep<expr_inner> c:S<")">
    { ("expr_call", vec![a, b, c]) }

expr_field -> (&'static str, Vec<Elem<'input>>) =
    a:S<"."> b:expr_field_name
    { ("expr_field", vec![a, b]) }

expr_field_name -> Elem<'input> =
    expr_tuple_field /
    expr_named_field

expr_tuple_field -> Elem<'input> =
    a:T<IntegerDec>
    { node!("expr_tuple_field", a) }

expr_named_field -> Elem<'input> =
    a:ident b:opt<type_arguments<S<"::">>>
    { node!("expr_named_field", a, b) }

expr_try -> (&'static str, Vec<Elem<'input>>) =
    a:S<"?">
    { ("expr_try", vec![a]) }

expr_prim -> Elem<'input> =
    expr_block_like /
    expr_needs_sep

expr_block_like -> Elem<'input> =
    block /
    expr_loop /
    expr_for /
    expr_while /
    expr_if /
    expr_match /
    expr_unsafe

// Tokens that can start expr_block_like
expr_block_start -> Elem<'input> =
    S<"{"> / K<"loop"> / K<"for"> / K<"while"> / K<"if"> / K<"match"> / K<"unsafe">

expr_needs_sep -> Elem<'input> =
    !expr_block_start
    a:(
        literal /
        expr_return /
        expr_break /
        expr_closure /
        expr_path /
        expr_qual /
        expr_array /
        expr_tuple /
        expr_group
    )
    { a }

expr_path -> Elem<'input> =
    follow<path<S<"::">>, expr_path_tail>

expr_path_tail -> (&'static str, Vec<Elem<'input>>) =
    expr_struct /
    expr_macro

expr_struct -> (&'static str, Vec<Elem<'input>>) =
    &struct_ctor_allowed a:S<"{"> b:csep<struct_ctor_field> c:opt<struct_splat> d:S<"}">
    { ("expr_struct", vec![ a, b, c, d ]) }

struct_ctor_allowed =
    {?
        if struct_literal {
            Ok(())
        } else {
            Err("")
        }
    }

struct_ctor_field -> Elem<'input> =
    a:ident b:opt<struct_ctor_value>
    { node!("struct_ctor_field", a, b) }

struct_ctor_value -> Elem<'input> =
    a:S<":"> b:expr
    { node!("struct_ctor_value", a, b) }

struct_splat -> Elem<'input> =
    a:S<".."> b:expr_inner
    { node!("struct_splat", a, b) }

expr_macro -> (&'static str, Vec<Elem<'input>>) =
    a:S<"!"> b:macro_group<macro_arg>
    { ("expr_macro", vec![ a, b ]) }

path<args_prefix> =
    a:path_elem<opt<S<"::">>, args_prefix> b:path_elem<S<"::">, args_prefix>*
    { node_vec("path", prepend(a, b)) }

path_elem<elem_prefix, args_prefix> =
    a:elem_prefix b:ident c:opt<type_arguments<args_prefix>>
    { node!("path_elem", a, b, c) }

expr_qual -> Elem<'input> =
    a:type_as_body b:path_elem<S<"::">, S<"::">>+
    { node_vec("expr_qual", prepend(a, b)) }

expr_array -> Elem<'input> =
    a:S<"["> b:expr_array_body c:S<"]">
    { node!("array", a, b, c) }

expr_array_body -> Elem<'input> =
    expr_array_copy /
    expr_array_list

expr_array_list -> Elem<'input> =
    csep<expr>

expr_array_copy -> Elem<'input> =
    a:expr b:S<";"> c:expr
    { node!("array_copy", a, b, c) }

expr_tuple -> Elem<'input> =
    a:S<"("> b:opt<csep_tuple<expr_inner>> c:S<")">
    { node!("expr_tuple", a, b, c) }

expr_group -> Elem<'input> =
    a:S<"("> b:expr_inner c:S<")">
    { node!("expr_group", a, b, c) }

expr_loop -> Elem<'input> =
    a:K<"loop"> b:block
    { node!("expr_loop", a, b) }

expr_for -> Elem<'input> =
    a:K<"for"> b:pattern c:K<"in"> d:expr_no_struct e:block
    { node!("expr_for", a, b, c, d, e) }

expr_no_struct -> Elem<'input> =
    a:expr<(false)>
    { a }

expr_while -> Elem<'input> =
    a:K<"while"> b:condition c:block
    { node!("expr_while", a, b, c) }

condition -> Elem<'input> =
    let_pattern /
    expr_no_struct

let_pattern -> Elem<'input> =
    a:K<"let"> b:pattern c:S<"="> d:expr_no_struct
    { node!("let_pattern", a, b, c, d) }

expr_if -> Elem<'input> =
    a:K<"if"> b:condition c:block d:opt<expr_if_else>
    { node!("expr_if", a, b, c, d) }

expr_if_else -> Elem<'input> =
    a:K<"else"> b:(expr_if / block)
    { node!("expr_if_else", a, b) }

expr_return -> Elem<'input> =
    a:K<"return"> b:expr
    { node!("expr_return", a, b) }

expr_break -> Elem<'input> =
    a:K<"break"> b:opt<label> c:opt<expr>
    { node!("expr_break", a, b, c) }

expr_match -> Elem<'input> =
    a:K<"match"> b:expr<(false)> c:S<"{"> d:match_case_list e:S<"}">
    { node!("expr_match", a, b, c, d, e) }

match_case_list -> Elem<'input> =
    a:match_case<S<",">>* b:match_case<empty>?
    { node_vec("match_case_list", append(a, b)) }

match_case<suffix> =
    a:sep_list1<pattern, S<"|">> b:opt<match_guard> c:S<"=>"> d:match_value<suffix>
    { node!("match_case", a, b, c, d.0, d.1) }

match_guard -> Elem<'input> =
    a:K<"if"> b:expr<(true)>
    { node!("match_guard", a, b) }

match_value<suffix> =
    a:expr_block_like b:opt<suffix>
    { (a, b) }
    /
    !expr_block_start a:expr<(true)> b:suffix
    { (a, b) }

expr_unsafe -> Elem<'input> =
    a:K<"unsafe"> b:block
    { node!("expr_unsafe", a, b) }

expr_closure -> Elem<'input> =
    a:S<"|"> b:csep<closure_param> c:S<"|"> d:closure_tail
    { node!("expr_closure", a, b, c, d.0, d.1) }

closure_param -> Elem<'input> =
    pattern

closure_tail -> (Elem<'input>, Elem<'input>) =
    a:opt<fn_return_type> b:block
    { (a, b) }
    /
    a:empty b:expr<(true)>
    { (a, b) }

empty -> Elem<'input> = { node!("empty") }

// Whitespace
_ = ([ \t\n] / "//" [^\n]* "\n")*

Ws -> Elem<'input> =
    p:$(_)
    { text(p, "") }

// Any program text
T<ex> =
    p:$(_) t:$(ex)
    { text(p, t) }

// Text with no leading whitespace allowed
T_nows<ex> =
    t:$(ex)
    { text("", t) }

// Symbols and punctuation: parens, brackets, comma, and such.
S<ex> = T<ex>

// Keywords
K<ex> = p:$(_) t:$(ex) ![a-zA-Z0-9_] {
    text(p, t)
}

// Identifiers
ident -> Elem<'input> =
    a:T<IdentLiteral>
    { node!("ident", a) }

IdentLiteral =
    [a-zA-Z_] [a-zA-Z0-9_]*

lifetime -> Elem<'input> =
    a:Label
    { node!("lifetime", a) }

label -> Elem<'input> =
    a:Label
    { node!("iabel", a) }

Label -> Elem<'input> =
    T<"'" IdentLiteral>

// Literals
Hex = [0-9a-fA-F]
Oct = [0-7]
Bin = [01]
Dec = [0-9]

integer -> Elem<'input> =
    a:T<IntegerLiteral> b:opt<T_nows<IntegerSuffix>>
    { node!("integer", a, b) }

IntegerLiteral =
    IntegerHex /
    IntegerOct /
    IntegerBin /
    IntegerDec

Int<digit> = digit (digit / "_")*
IntegerHex = "0x" Int<Hex>
IntegerOct = "0o" Int<Oct>
IntegerBin = "0b" Int<Bin>
IntegerDec = Int<Dec>

IntegerSuffix =
    [ui]("8" / "16" / "32" / "64" / "128" / "size")

float -> Elem<'input> =
    a:T<IntegerDec> b:T_nows<FloatingSuffix>
    { node!("floating", a, b) }
    /
    a:T<FloatingLiteral> b:opt<T_nows<FloatingSuffix>>
    { node!("floating", a, b) }

FloatingLiteral =
    Int<Dec> ("." (Int<Dec> FloatingExp? / !("." / IdentLiteral)) / FloatingExp)

FloatingExp =
    [eE][+-]?Int<Dec>

FloatingSuffix = "f32" / "f64"

char -> Elem<'input> =
    a:T<"b"?> b:T_nows<[']> c:T_nows<([^'\\] / StringEscape)*> d:T_nows<[']>
    {
        let kind = if a.text() == Some("b") { "char_byte" } else { "char" };
        node!(kind, a, b, c, d)
    }

string -> Elem<'input> =
    string_normal /
    string_raw

string_normal -> Elem<'input> =
    a:T<"b"?> b:T_nows<["]> c:T_nows<([^"\\] / StringEscape)*> d:T_nows<["]>
    {
        let kind = if a.text() == Some("b") { "string_byte" } else { "string" };
        node!(kind, a, b, c, d)
    }

StringEscape =
    "\\" (["'nrt0\\\n] / "x" Hex Hex / "u{" Hex+ "}")

string_raw -> Elem<'input> =
    a:T<"b"?> b:$("r" "#"* ["]) c:T_nows<([^"] / ["] !( "#"*<{b.len()-2}> ))*> d:T_nows<["] "#"*<{b.len()-2}>>
    {
        let kind = if a.text() == Some("b") { "string_byte_raw" } else { "string_raw" };
        node!(kind, a, text("", b), c, d)
    }

// Separated lists
sep_list0<ex, sep> =
    sep_list1<ex, sep> / empty

sep_list1<ex, sep> =
    x:ex b:sep_elem<sep, ex>* c:sep?
    { node_vec("list", append(prepend(x, b), c)) }

// Separated list, tuple style - single element requires trailing separator
sep_tuple<ex, sep> =
    xs:sep_elem<ex, sep>+ x:sep_elem<ex, empty>?
    { node_vec("list", append(xs, x)) }

sep_elem<a, b> =
    a:a b:b
    { node!("list_elem", a, b) }

// Comma-separated lists
csep<ex> = sep_list0<ex, S<",">>
csep_tuple<ex> = sep_tuple<ex, S<",">>

// Non-separated lists
list<ex> = sep_list0<ex, empty>

// Optional elements
opt<ex> =
    e:ex?
    { e.unwrap_or_else(|| node!("empty")) }
